buildscript {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/groups/public/" }
        maven { url "https://repo.spring.io/libs-milestone/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "se.transmode.gradle:gradle-docker:${transmodeGradleDockerVersion}"
    }
}

ext {
    springMybatisVersion = '2.1.0'
    druidVersion = '1.1.18'
    mysqlVersion = '8.0.12'
    fastjsonVersion = '1.2.58'
    swaggerVersion = '2.9.2'
    commonsLangVersion = '3.8.1'
    zxingVersion = '3.4.0'
    easyexcelVersion = '1.1.2-beta5'
    pagehelperVersion = '1.2.12'
}

def env = System.getProperty("env") ?: "dev"
def versionSuffix = "prod" == env ? "RELEASE" : "SNAPSHOT"

configure(allprojects) { project ->

    group 'org.warless'
    version "1.0-${versionSuffix}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/libs-milestone/" }
        jcenter()
        mavenLocal()
    }

    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        applyMavenExclusions = false
        generatedPomCustomization {
            enabled = false
        }
        overriddenByDependencies = false
        dependencies {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
            dependency "com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelperVersion}"
            dependency "org.mybatis.spring.boot:mybatis-spring-boot-starter:${springMybatisVersion}"
            dependency "mysql:mysql-connector-java:${mysqlVersion}"
            dependency "com.alibaba:druid:${druidVersion}"
            dependency "com.alibaba:fastjson:${fastjsonVersion}"
            dependency "com.google.zxing:core:${zxingVersion}"
            dependency "com.google.zxing:javase:${zxingVersion}"
            dependency "io.springfox:springfox-swagger2:${swaggerVersion}"
            dependency "io.springfox:springfox-swagger-ui:${swaggerVersion}"
            dependency "org.apache.commons:commons-lang3:${commonsLangVersion}"
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }

}

configure(subprojects) { project ->

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'src/main/java'
            }
        }
    }

    dependencies {
        implementation  'org.springframework.boot:spring-boot-starter'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

}

configure(rootProject) {

    description = "Incubator Projects"

    apply plugin: 'application'

    dependencies {
        testCompile(
                project(":incubator-project-oauth2"),
                project(":incubator-project-simplefeign")
        )
    }

    artifacts {
        archives distZip
    }

}