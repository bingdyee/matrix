/*
 * This file is generated by jOOQ.
 */
package io.hikari.jooq.generated.tables;


import io.hikari.jooq.generated.Hikari;
import io.hikari.jooq.generated.Indexes;
import io.hikari.jooq.generated.Keys;
import io.hikari.jooq.generated.tables.records.OauthAccessTokenRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthAccessToken extends TableImpl<OauthAccessTokenRecord> {

    private static final long serialVersionUID = 1130936089;

    /**
     * The reference instance of <code>hikari.oauth_access_token</code>
     */
    public static final OauthAccessToken OAUTH_ACCESS_TOKEN = new OauthAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthAccessTokenRecord> getRecordType() {
        return OauthAccessTokenRecord.class;
    }

    /**
     * The column <code>hikari.oauth_access_token.token_id</code>. 将access_token的值通过MD5加密后存储的
     */
    public final TableField<OauthAccessTokenRecord, String> TOKEN_ID = createField("token_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "将access_token的值通过MD5加密后存储的");

    /**
     * The column <code>hikari.oauth_access_token.token</code>. 将OAuth2AccessToken.java对象序列化后的二进制数据, 是真实的AccessToken的数据值
     */
    public final TableField<OauthAccessTokenRecord, byte[]> TOKEN = createField("token", org.jooq.impl.SQLDataType.BLOB, this, "将OAuth2AccessToken.java对象序列化后的二进制数据, 是真实的AccessToken的数据值");

    /**
     * The column <code>hikari.oauth_access_token.authentication_id</code>. 根据当前的username(如果有),client_id与scope通过MD5加密生成
     */
    public final TableField<OauthAccessTokenRecord, String> AUTHENTICATION_ID = createField("authentication_id", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "根据当前的username(如果有),client_id与scope通过MD5加密生成");

    /**
     * The column <code>hikari.oauth_access_token.user_name</code>. 登录时的用户名, 若客户端没有用户名(如grant_type="client_credentials"),则该值等于client_id
     */
    public final TableField<OauthAccessTokenRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "登录时的用户名, 若客户端没有用户名(如grant_type=\"client_credentials\"),则该值等于client_id");

    /**
     * The column <code>hikari.oauth_access_token.client_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>hikari.oauth_access_token.authentication</code>. 将OAuth2Authentication.java对象序列化后的二进制数据.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> AUTHENTICATION = createField("authentication", org.jooq.impl.SQLDataType.BLOB, this, "将OAuth2Authentication.java对象序列化后的二进制数据.");

    /**
     * The column <code>hikari.oauth_access_token.refresh_token</code>. 将refresh_token的值通过MD5加密后存储的.
     */
    public final TableField<OauthAccessTokenRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR(256), this, "将refresh_token的值通过MD5加密后存储的.");

    /**
     * Create a <code>hikari.oauth_access_token</code> table reference
     */
    public OauthAccessToken() {
        this(DSL.name("oauth_access_token"), null);
    }

    /**
     * Create an aliased <code>hikari.oauth_access_token</code> table reference
     */
    public OauthAccessToken(String alias) {
        this(DSL.name(alias), OAUTH_ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>hikari.oauth_access_token</code> table reference
     */
    public OauthAccessToken(Name alias) {
        this(alias, OAUTH_ACCESS_TOKEN);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthAccessToken(Name alias, Table<OauthAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OauthAccessToken(Table<O> child, ForeignKey<O, OauthAccessTokenRecord> key) {
        super(child, key, OAUTH_ACCESS_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Hikari.HIKARI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_ACCESS_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthAccessTokenRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthAccessTokenRecord>>asList(Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthAccessToken as(String alias) {
        return new OauthAccessToken(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthAccessToken as(Name alias) {
        return new OauthAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(String name) {
        return new OauthAccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(Name name) {
        return new OauthAccessToken(name, null);
    }
}
