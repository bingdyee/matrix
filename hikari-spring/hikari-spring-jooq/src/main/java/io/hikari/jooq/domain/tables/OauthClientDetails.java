/*
 * This file is generated by jOOQ.
 */
package io.hikari.jooq.domain.tables;


import io.hikari.jooq.domain.Hikari;
import io.hikari.jooq.domain.Indexes;
import io.hikari.jooq.domain.Keys;
import io.hikari.jooq.domain.tables.records.OauthClientDetailsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthClientDetails extends TableImpl<OauthClientDetailsRecord> {

    private static final long serialVersionUID = -688713819;

    /**
     * The reference instance of <code>hikari.oauth_client_details</code>
     */
    public static final OauthClientDetails OAUTH_CLIENT_DETAILS = new OauthClientDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthClientDetailsRecord> getRecordType() {
        return OauthClientDetailsRecord.class;
    }

    /**
     * The column <code>hikari.oauth_client_details.client_id</code>. 用于唯一标识每一个客户端
     */
    public final TableField<OauthClientDetailsRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "用于唯一标识每一个客户端");

    /**
     * The column <code>hikari.oauth_client_details.resource_ids</code>. 客户端所能访问的资源id集合，多个资源时用逗号(,)分隔
     */
    public final TableField<OauthClientDetailsRecord, String> RESOURCE_IDS = createField("resource_ids", org.jooq.impl.SQLDataType.VARCHAR(128), this, "客户端所能访问的资源id集合，多个资源时用逗号(,)分隔");

    /**
     * The column <code>hikari.oauth_client_details.client_secret</code>. 客户端(client)的访问密匙
     */
    public final TableField<OauthClientDetailsRecord, String> CLIENT_SECRET = createField("client_secret", org.jooq.impl.SQLDataType.VARCHAR(256), this, "客户端(client)的访问密匙");

    /**
     * The column <code>hikari.oauth_client_details.scope</code>. 客户端申请的权限范围,可选值包括read,write,trust
     */
    public final TableField<OauthClientDetailsRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR(128), this, "客户端申请的权限范围,可选值包括read,write,trust");

    /**
     * The column <code>hikari.oauth_client_details.authorized_grant_types</code>. 指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials, 若支持多个grant_type用逗号(,)分隔,如: "authorization_code,password".
     */
    public final TableField<OauthClientDetailsRecord, String> AUTHORIZED_GRANT_TYPES = createField("authorized_grant_types", org.jooq.impl.SQLDataType.VARCHAR(128), this, "指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials, 若支持多个grant_type用逗号(,)分隔,如: \"authorization_code,password\".");

    /**
     * The column <code>hikari.oauth_client_details.web_server_redirect_uri</code>. 客户端的重定向URI,可为空, 当grant_type为authorization_code或implicit时, 在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致. 下面分别说明:
当grant_type=authorization_code时, 第一步 从 spring-oauth-server获取 'code'时客户端发起请求时必须有redirect_uri参数, 该参数的值必须与 web_server_redirect_uri的值一致. 第二步 用 'code' 换取 'access_token' 时客户也必须传递相同的redirect_uri. 
在实际应用中, web_server_redirect_uri在注册时是必须填写的, 一般用来处理服务器返回的code, 验证state是否合法与通过code去换取access_token值. 
在spring-oauth-client项目中, 可具体参考AuthorizationCodeController.java中的authorizationCodeCallback方法.
当grant_type=implicit时通过redirect_uri的hash值来传递access_token值.如:
     */
    public final TableField<OauthClientDetailsRecord, String> WEB_SERVER_REDIRECT_URI = createField("web_server_redirect_uri", org.jooq.impl.SQLDataType.VARCHAR(128), this, "客户端的重定向URI,可为空, 当grant_type为authorization_code或implicit时, 在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致. 下面分别说明:\r\n当grant_type=authorization_code时, 第一步 从 spring-oauth-server获取 'code'时客户端发起请求时必须有redirect_uri参数, 该参数的值必须与 web_server_redirect_uri的值一致. 第二步 用 'code' 换取 'access_token' 时客户也必须传递相同的redirect_uri. \r\n在实际应用中, web_server_redirect_uri在注册时是必须填写的, 一般用来处理服务器返回的code, 验证state是否合法与通过code去换取access_token值. \r\n在spring-oauth-client项目中, 可具体参考AuthorizationCodeController.java中的authorizationCodeCallback方法.\r\n当grant_type=implicit时通过redirect_uri的hash值来传递access_token值.如:");

    /**
     * The column <code>hikari.oauth_client_details.authorities</code>. 客户端所拥有的Spring Security的权限值,可选, 若有多个权限值,用逗号(,)分隔
     */
    public final TableField<OauthClientDetailsRecord, String> AUTHORITIES = createField("authorities", org.jooq.impl.SQLDataType.VARCHAR(128), this, "客户端所拥有的Spring Security的权限值,可选, 若有多个权限值,用逗号(,)分隔");

    /**
     * The column <code>hikari.oauth_client_details.access_token_validity</code>. 客户端的access_token的有效时间值(单位:秒)
     */
    public final TableField<OauthClientDetailsRecord, Integer> ACCESS_TOKEN_VALIDITY = createField("access_token_validity", org.jooq.impl.SQLDataType.INTEGER, this, "客户端的access_token的有效时间值(单位:秒)");

    /**
     * The column <code>hikari.oauth_client_details.refresh_token_validity</code>. 客户端的refresh_token的有效时间值(单位:秒)
     */
    public final TableField<OauthClientDetailsRecord, Integer> REFRESH_TOKEN_VALIDITY = createField("refresh_token_validity", org.jooq.impl.SQLDataType.INTEGER, this, "客户端的refresh_token的有效时间值(单位:秒)");

    /**
     * The column <code>hikari.oauth_client_details.additional_information</code>. 预留的字段，必须是JSON格式
     */
    public final TableField<OauthClientDetailsRecord, String> ADDITIONAL_INFORMATION = createField("additional_information", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "预留的字段，必须是JSON格式");

    /**
     * The column <code>hikari.oauth_client_details.autoapprove</code>. 设置用户是否自动Approval操作, 默认值为 'false', 可选值包括 'true','false', 'read','write'. 
该字段只适用于grant_type="authorization_code"的情况,当用户登录成功后,若该值为'true'或支持的scope值,则会跳过用户Approve的页面, 直接授权. 
该字段与 trusted 有类似的功能, 是 spring-security-oauth2 的 2.0 版本后添加的新属性
     */
    public final TableField<OauthClientDetailsRecord, String> AUTOAPPROVE = createField("autoapprove", org.jooq.impl.SQLDataType.VARCHAR(256), this, "设置用户是否自动Approval操作, 默认值为 'false', 可选值包括 'true','false', 'read','write'. \r\n该字段只适用于grant_type=\"authorization_code\"的情况,当用户登录成功后,若该值为'true'或支持的scope值,则会跳过用户Approve的页面, 直接授权. \r\n该字段与 trusted 有类似的功能, 是 spring-security-oauth2 的 2.0 版本后添加的新属性");

    /**
     * Create a <code>hikari.oauth_client_details</code> table reference
     */
    public OauthClientDetails() {
        this(DSL.name("oauth_client_details"), null);
    }

    /**
     * Create an aliased <code>hikari.oauth_client_details</code> table reference
     */
    public OauthClientDetails(String alias) {
        this(DSL.name(alias), OAUTH_CLIENT_DETAILS);
    }

    /**
     * Create an aliased <code>hikari.oauth_client_details</code> table reference
     */
    public OauthClientDetails(Name alias) {
        this(alias, OAUTH_CLIENT_DETAILS);
    }

    private OauthClientDetails(Name alias, Table<OauthClientDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthClientDetails(Name alias, Table<OauthClientDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OauthClientDetails(Table<O> child, ForeignKey<O, OauthClientDetailsRecord> key) {
        super(child, key, OAUTH_CLIENT_DETAILS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Hikari.HIKARI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_CLIENT_DETAILS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthClientDetailsRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_CLIENT_DETAILS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthClientDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthClientDetailsRecord>>asList(Keys.KEY_OAUTH_CLIENT_DETAILS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthClientDetails as(String alias) {
        return new OauthClientDetails(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthClientDetails as(Name alias) {
        return new OauthClientDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthClientDetails rename(String name) {
        return new OauthClientDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthClientDetails rename(Name name) {
        return new OauthClientDetails(name, null);
    }
}
