/*
 * This file is generated by jOOQ.
 */
package io.hikari.jooq.domain.tables;


import io.hikari.jooq.domain.Hikari;
import io.hikari.jooq.domain.Indexes;
import io.hikari.jooq.domain.Keys;
import io.hikari.jooq.domain.tables.records.TbStockBasicsRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbStockBasics extends TableImpl<TbStockBasicsRecord> {

    private static final long serialVersionUID = 168302974;

    /**
     * The reference instance of <code>hikari.tb_stock_basics</code>
     */
    public static final TbStockBasics TB_STOCK_BASICS = new TbStockBasics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbStockBasicsRecord> getRecordType() {
        return TbStockBasicsRecord.class;
    }

    /**
     * The column <code>hikari.tb_stock_basics.id</code>.
     */
    public final TableField<TbStockBasicsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>hikari.tb_stock_basics.stock_code</code>. 股票代码
     */
    public final TableField<TbStockBasicsRecord, String> STOCK_CODE = createField("stock_code", org.jooq.impl.SQLDataType.VARCHAR(6), this, "股票代码");

    /**
     * The column <code>hikari.tb_stock_basics.company_name</code>. 公司名称
     */
    public final TableField<TbStockBasicsRecord, String> COMPANY_NAME = createField("company_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "公司名称");

    /**
     * The column <code>hikari.tb_stock_basics.industry</code>. 所属行业
     */
    public final TableField<TbStockBasicsRecord, String> INDUSTRY = createField("industry", org.jooq.impl.SQLDataType.VARCHAR(16), this, "所属行业");

    /**
     * The column <code>hikari.tb_stock_basics.area</code>. 地区
     */
    public final TableField<TbStockBasicsRecord, String> AREA = createField("area", org.jooq.impl.SQLDataType.VARCHAR(32), this, "地区");

    /**
     * The column <code>hikari.tb_stock_basics.pe</code>. 市盈率
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> PE = createField("pe", org.jooq.impl.SQLDataType.DECIMAL(8, 2), this, "市盈率");

    /**
     * The column <code>hikari.tb_stock_basics.outstanding</code>. 流通股本(亿)
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> OUTSTANDING = createField("outstanding", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "流通股本(亿)");

    /**
     * The column <code>hikari.tb_stock_basics.totals</code>. 总股本(亿)
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> TOTALS = createField("totals", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "总股本(亿)");

    /**
     * The column <code>hikari.tb_stock_basics.total_assets</code>. 总资产(万)
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> TOTAL_ASSETS = createField("total_assets", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "总资产(万)");

    /**
     * The column <code>hikari.tb_stock_basics.liquid_assets</code>. 流动资产
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> LIQUID_ASSETS = createField("liquid_assets", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "流动资产");

    /**
     * The column <code>hikari.tb_stock_basics.reserved</code>. 公积金
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> RESERVED = createField("reserved", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "公积金");

    /**
     * The column <code>hikari.tb_stock_basics.reserved_per_share</code>. 每股公积金
     */
    public final TableField<TbStockBasicsRecord, BigDecimal> RESERVED_PER_SHARE = createField("reserved_per_share", org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "每股公积金");

    /**
     * The column <code>hikari.tb_stock_basics.launch_time</code>. 上市日期
     */
    public final TableField<TbStockBasicsRecord, LocalDate> LAUNCH_TIME = createField("launch_time", org.jooq.impl.SQLDataType.LOCALDATE, this, "上市日期");

    /**
     * The column <code>hikari.tb_stock_basics.del_flag</code>. 是否删除 1-删除 0-正常
     */
    public final TableField<TbStockBasicsRecord, Integer> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.INTEGER, this, "是否删除 1-删除 0-正常");

    /**
     * Create a <code>hikari.tb_stock_basics</code> table reference
     */
    public TbStockBasics() {
        this(DSL.name("tb_stock_basics"), null);
    }

    /**
     * Create an aliased <code>hikari.tb_stock_basics</code> table reference
     */
    public TbStockBasics(String alias) {
        this(DSL.name(alias), TB_STOCK_BASICS);
    }

    /**
     * Create an aliased <code>hikari.tb_stock_basics</code> table reference
     */
    public TbStockBasics(Name alias) {
        this(alias, TB_STOCK_BASICS);
    }

    private TbStockBasics(Name alias, Table<TbStockBasicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbStockBasics(Name alias, Table<TbStockBasicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TbStockBasics(Table<O> child, ForeignKey<O, TbStockBasicsRecord> key) {
        super(child, key, TB_STOCK_BASICS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Hikari.HIKARI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TB_STOCK_BASICS_IDX_CODE_COMPANY_INDUSTRY, Indexes.TB_STOCK_BASICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TbStockBasicsRecord> getPrimaryKey() {
        return Keys.KEY_TB_STOCK_BASICS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TbStockBasicsRecord>> getKeys() {
        return Arrays.<UniqueKey<TbStockBasicsRecord>>asList(Keys.KEY_TB_STOCK_BASICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbStockBasics as(String alias) {
        return new TbStockBasics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TbStockBasics as(Name alias) {
        return new TbStockBasics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbStockBasics rename(String name) {
        return new TbStockBasics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbStockBasics rename(Name name) {
        return new TbStockBasics(name, null);
    }
}
